{"version":3,"file":"component---src-templates-page-schema-template-tsx-1db3ddcc21b0a4b3792f.js","mappings":"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","sources":["webpack://documentation/./src/components/Redoc/ContentItems/components/PrimitiveSchemaItem.tsx","webpack://documentation/./src/components/Redoc/Schema/SchemaExamples.tsx","webpack://documentation/./src/components/Redoc/Schema/Schema.tsx","webpack://documentation/./src/templates/page-schema-template.tsx"],"sourcesContent":["import Grid from \"@mui/material/Grid\";\nimport { KeyItem } from \"./KeyItem\";\nimport Typography from \"@mui/material/Typography\";\nimport Divider from \"@mui/material/Divider\";\nimport Paper from \"@mui/material/Paper\";\nimport * as React from \"react\";\nimport { PropertyItem } from \"./PropertiesItem\";\nimport { SchemaModel } from \"../../../../services/models/SchemaModel\";\n\ninterface Props {\n  itemKey: string;\n  field: SchemaModel;\n  onItemClick?: (key: string) => void;\n}\n\nexport const PrimitiveSchemaItem = ({ itemKey, field, onItemClick }: Props) => {\n  const item = field.schema;\n\n  const isSelectable = item.type === \"object\";\n\n  const isRequired = field.required === true;\n\n  const isDeprecated = field.deprecated;\n\n  return (\n    <Paper elevation={1} sx={{ pt: 1, pl: 1, width: \"100%\" }}>\n      <Grid container spacing={1}>\n        <Grid item xs={4}>\n          <KeyItem\n            itemKey={itemKey}\n            name={itemKey}\n            deprecated={isDeprecated}\n            onClick={isSelectable ? onItemClick : undefined}\n          />\n          {isRequired && <Typography color={\"error\"}>required</Typography>}\n          {isDeprecated && <Typography color={\"error\"}>deprecated</Typography>}\n        </Grid>\n        <Grid item xs={8}>\n          <PropertyItem item={field} hideDescription/>\n          <Divider sx={{ mt: 2 }} />\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n","import * as React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport { useState } from \"react\";\nimport ReactJson from \"react-json-view\";\nimport { isBrowser } from \"../Markdown/SanitizedMdBlock\";\nimport { StyledToggleButton } from \"../ContentItems/components/ExamplesItem\";\nimport { StyledPre } from \"../../common/PrismDiv\";\nimport { highlight } from \"../../../utils\";\nimport { MediaTypeModel } from \"../../../services/models/MediaTypeModel\";\n\ninterface Props {\n  examples: Record<string, MediaTypeModel>;\n}\n\nexport default function SchemaExamples({ examples }: Props) {\n  if (examples == null || Object.keys(examples).length === 0) {\n    return null;\n  }\n  const exampleNames = Object.keys(examples);\n  const [selectedExample, setSelectedExample] = useState(exampleNames[0]);\n  const selectedExampleDataOptions = Object.entries(\n    examples[selectedExample].examples\n  );\n  const [selectedExampleOption, setSelectedExampleOption] = useState(\n    selectedExampleDataOptions[0][0]\n  );\n\n  const handleExampleChange = (\n    event: React.MouseEvent<HTMLElement>,\n    newParent: string | null\n  ) => {\n    if (newParent !== null) {\n      setSelectedExample(newParent);\n    }\n  };\n\n  const handleExampleOptionChange = (event: SelectChangeEvent) => {\n    setSelectedExampleOption(event.target.value);\n  };\n\n  return (\n    <React.Fragment>\n      <Grid container spacing={2} sx={{ mt: 1, ml: 1 }}>\n        <Grid item xs={12}>\n          {exampleNames.map((parentKey) => (\n            <StyledToggleButton\n              key={parentKey}\n              sx={{ mr: 1, pl: 2, pr: 2, pt: 0, pb: 0 }}\n              style={{\n                fontWeight: selectedExample === parentKey ? 700 : 400,\n              }}\n              color={\"secondary\"}\n              selected={selectedExample === parentKey}\n              value={parentKey}\n              onChange={handleExampleChange}\n            >\n              {parentKey}\n            </StyledToggleButton>\n          ))}\n        </Grid>\n        {selectedExampleDataOptions.length > 0 && (\n          <Grid item xs={12}>\n            <FormControl\n              variant=\"standard\"\n              sx={{ m: 1, minWidth: \"90%\" }}\n              color={\"secondary\"}\n            >\n              <InputLabel\n                id=\"media-select-label\"\n                sx={{ color: (theme) => theme.palette.grey[300] }}\n              >\n                Content Type\n              </InputLabel>\n              <Select\n                labelId=\"media-select-label\"\n                id=\"media-select\"\n                value={selectedExampleOption}\n                onChange={handleExampleOptionChange}\n                label=\"Content Type\"\n                sx={{ color: (theme) => theme.palette.grey[300] }}\n              >\n                {selectedExampleDataOptions.map(([optionName, optionObj]) => (\n                  <MenuItem key={optionName} value={optionName}>\n                    {optionName}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n        )}\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        sx={{ mt: 1, backgroundColor: (theme) => theme.palette.grey[900] }}\n      >\n        <Grid item xs={12}>\n          {examples[selectedExample] != null &&\n            isBrowser() &&\n            (typeof examples[selectedExample].examples[selectedExampleOption]?.value ===\n            \"object\" ? (\n              <ReactJson\n                theme={\"monokai\"}\n                src={examples[selectedExample].examples[selectedExampleOption]?.value}\n                collapsed={1}\n                name={false}\n                collapseStringsAfterLength={10}\n              />\n            ) : (\n              <StyledPre\n                style={{ padding: \"24px 8px\", fontSize: \"16px\" }}\n                dangerouslySetInnerHTML={{\n                  __html: highlight(\n                    examples[selectedExample].examples[selectedExampleOption]?.value || \"\",\n                    \"python\"\n                  ),\n                }}\n              />\n            ))}\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n","import * as React from \"react\";\nimport { OpenAPI } from \"../../../services/OpenAPI\";\nimport SectionItem from \"../ContentItems/SectionItem\";\nimport SchemaItem from \"../ContentItems/components/SchemaItem\";\nimport { SchemaModel } from \"../../../services/models/SchemaModel\";\nimport { MediaTypeModel } from \"../../../services/models/MediaTypeModel\";\nimport { OpenAPIV3_1 } from \"openapi-types\";\nimport { MiddlePanel, RightPanel } from \"../../common/Panels\";\nimport { OperationRow } from \"../ContentItems/OperationItem\";\nimport { PrimitiveSchemaItem } from \"../ContentItems/components/PrimitiveSchemaItem\";\nimport SchemaExamples from \"./SchemaExamples\";\n\ninterface Props {\n  selectedSchema: string;\n  openApiStore: OpenAPI;\n}\n\nexport default function Schema({ selectedSchema, openApiStore }: Props) {\n  const schema = new SchemaModel(\n    openApiStore,\n    openApiStore.spec.components.schemas[selectedSchema],\n    \"\",\n    {}\n  );\n\n  const examples = {\n    \"Full json\": new MediaTypeModel(\n      openApiStore,\n      \"Full json\",\n      false,\n      {\n        schema: openApiStore.spec.components.schemas[selectedSchema],\n        example: schema.example,\n      } as any as OpenAPIV3_1.MediaTypeObject,\n      {\n        onlyRequiredInSamples: false,\n        generatedPayloadSamplesMaxDepth: 12,\n      }\n    ),\n    \"Minimal json\": new MediaTypeModel(\n      openApiStore,\n      \"Minimal json\",\n      false,\n      {\n        schema: openApiStore.spec.components.schemas[selectedSchema],\n        example: schema.example,\n      } as any as OpenAPIV3_1.MediaTypeObject,\n      {\n        onlyRequiredInSamples: true,\n        generatedPayloadSamplesMaxDepth: 12,\n      }\n    ),\n  };\n\n  return (\n    <React.Fragment>\n      <SectionItem item={schema} />\n      <OperationRow>\n        <MiddlePanel compact={undefined}>\n          {schema.isPrimitive && (\n            <PrimitiveSchemaItem\n              key={schema.title}\n              itemKey={schema.title}\n              field={schema}\n            />\n          )}\n          {!schema.isPrimitive && (\n            <SchemaItem\n              schema={schema}\n              oneOf={\n                Array.isArray(schema.oneOf) && schema.oneOf.length > 0\n                  ? schema.oneOf\n                  : undefined\n              }\n            />\n          )}\n        </MiddlePanel>\n        <RightPanel>\n          <SchemaExamples examples={examples} />\n        </RightPanel>\n      </OperationRow>\n    </React.Fragment>\n  );\n}\n","import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../components/Layout/Layout\";\nimport { PageContext } from \"gatsby/internal\";\nimport { OpenAPI } from \"../services/OpenAPI\";\nimport { OpenAPISpec } from \"../types/OpenAPISpec\";\nimport Group from \"../components/Redoc/Group/Group\";\nimport DocHead from \"../components/Layout/DocHead\";\nimport Schema from \"../components/Redoc/Schema/Schema\";\nimport {getLatestSemver} from \"../utils\";\n\ninterface Props {\n  data: {\n    openapiYaml: {\n      info: {\n        contact: {\n          email: string;\n          url: string;\n        };\n        description: string;\n        termsOfService: string;\n        title: string;\n        version: string;\n      };\n      openapi: string;\n      x_tagGroups: {\n        name: string;\n        section: string;\n        tags: {\n          name: string;\n          slug: string;\n        };\n        slug: string;\n      }[];\n      schemas: {\n        name: string;\n        slug: string;\n        doNotRender: boolean | null;\n      }[];\n      spec: string;\n      slug: string;\n      tags: {\n        description: string;\n        name: string;\n      };\n    };\n    allOpenapiYaml: {\n      nodes: [\n        {\n          info: {\n            version: string;\n          };\n          slug: string;\n        }\n      ]\n    };\n    site: {\n      siteMetadata: {\n        categories: {\n          name: string;\n          key: string;\n        }[];\n      };\n    };\n  };\n  pageContext: PageContext;\n}\n\nexport default function PageTemplate({ data, pageContext }: Props) {\n  const {\n    openapiYaml,\n    allOpenapiYaml,\n    site: {\n      siteMetadata: { categories },\n    },\n  } = data;\n  const latestVersion = getLatestSemver(allOpenapiYaml.nodes.map((openapi) => openapi.info.version));\n  const openApiStore = new OpenAPI({\n    spec: JSON.parse(openapiYaml.spec) as any as OpenAPISpec,\n    versionSlug: openapiYaml.info.version === latestVersion ? 'latest' : openapiYaml.slug,\n  });\n  const selectedSchema = openapiYaml?.schemas?.find(\n    (schema) => schema.slug === pageContext.schema\n  );\n  return (\n    <Layout\n      selectedVersion={openapiYaml.slug}\n      selectedSchema={pageContext.schema}\n      openApiStore={openApiStore}\n    >\n      <React.Fragment>\n        <DocHead\n          title={pageContext.schema + \" - v\" + openapiYaml.info.version}\n        />\n        <Schema\n          selectedSchema={selectedSchema.name}\n          openApiStore={openApiStore}\n        />\n      </React.Fragment>\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query VersionWithSchema($verid: String!, $schema: String!) {\n    openapiYaml(\n      schemas: { elemMatch: { slug: { eq: $schema } } }\n      id: { eq: $verid }\n    ) {\n      info {\n        contact {\n          email\n          url\n        }\n        description\n        termsOfService\n        title\n        version\n      }\n      openapi\n      x_tagGroups {\n        name\n        section\n        tags {\n          name\n          slug\n        }\n        slug\n      }\n      schemas {\n        slug\n        name\n        doNotRender\n      }\n      spec\n      slug\n      tags {\n        description\n        name\n      }\n    }\n    allOpenapiYaml {\n      nodes {\n        info {\n          version\n        }\n        slug\n      }\n    }\n    site {\n      siteMetadata {\n        categories {\n          name\n          key\n        }\n      }\n    }\n  }\n`;\n"],"names":["PrimitiveSchemaItem","itemKey","field","onItemClick","isSelectable","schema","type","isRequired","required","isDeprecated","deprecated","Paper","elevation","sx","pt","pl","width","Grid","container","spacing","item","xs","KeyItem","name","onClick","undefined","Typography","color","hideDescription","Divider","mt","SchemaExamples","examples","Object","keys","length","exampleNames","useState","selectedExample","setSelectedExample","selectedExampleDataOptions","entries","selectedExampleOption","setSelectedExampleOption","handleExampleChange","event","newParent","ml","map","parentKey","key","mr","pr","pb","style","fontWeight","selected","value","onChange","FormControl","variant","m","minWidth","InputLabel","id","theme","palette","grey","Select","labelId","target","label","optionName","MenuItem","backgroundColor","isBrowser","src","collapsed","collapseStringsAfterLength","padding","fontSize","dangerouslySetInnerHTML","__html","highlight","Schema","selectedSchema","openApiStore","SchemaModel","spec","components","schemas","MediaTypeModel","example","onlyRequiredInSamples","generatedPayloadSamplesMaxDepth","SectionItem","compact","isPrimitive","title","SchemaItem","oneOf","Array","isArray","PageTemplate","data","pageContext","openapiYaml","allOpenapiYaml","latestVersion","site","siteMetadata","categories","getLatestSemver","nodes","openapi","info","version","OpenAPI","JSON","parse","versionSlug","slug","find","Layout","selectedVersion","DocHead"],"sourceRoot":""}