{"version":3,"file":"component---src-pages-404-tsx-31dbf93ee4deaedc0e97.js","mappings":"yLASMA,EAAa,CACjBC,MAAO,UACPC,QAAS,OACTC,WAAY,4CAERC,EAAgB,CACpBC,UAAW,EACXC,aAAc,GACdC,SAAU,KAGNC,EAAkB,CACtBF,aAAc,IAqFhB,UA1DqB,SAAC,GAAqB,IAErBG,EAFoB,EAAlBC,KAEpBC,eAAkBF,MAEdG,EAAeC,IAAAA,cACnBJ,EAAMK,KAAI,SAACC,GAAD,OAAUA,EAAKC,KAAKC,KAAKC,WACnC,KAEIC,EAAYV,EAAMW,MACtB,SAACL,GAAD,OAAUA,EAAKC,KAAKC,KAAKC,UAAYN,KAEjCS,EAAe,IAAIC,EAAAA,GAAQ,CAC/BC,KAAMC,KAAKC,MAAMN,EAAUH,KAAKO,MAAQ,QAE1C,OACE,gBAAC,IAAD,CAAQF,aAAcA,EAAcK,gBAAiBP,EAAUH,KAAKW,MAClE,wBAAMC,MAAO5B,GACb,0CACA,sBAAI4B,MAAOxB,GAAX,kBACA,qBAAGwB,MAAOpB,GAAV,QACQ,IACN,wBAAMqB,KAAK,MAAM,aAAW,iBAA5B,MAEQ,IAJV,8CAME,2BAOI,KACJ,2BACA,gBAAC,EAAAC,KAAD,CAAMC,GAAG,KAAT,WAfF","sources":["webpack://documentation/./src/pages/404.tsx"],"sourcesContent":["import * as React from \"react\"\nimport {graphql, Link} from \"gatsby\"\nimport {useEffect} from \"react\";\nimport {OpenAPI} from \"../services/OpenAPI\";\nimport {OpenAPISpec} from \"../types/OpenAPISpec\";\nimport Layout from \"../components/Layout/Layout\";\nimport semver from \"semver\";\n\n// styles\nconst pageStyles = {\n  color: \"#232129\",\n  padding: \"96px\",\n  fontFamily: \"-apple-system, Roboto, sans-serif, serif\",\n}\nconst headingStyles = {\n  marginTop: 0,\n  marginBottom: 64,\n  maxWidth: 320,\n}\n\nconst paragraphStyles = {\n  marginBottom: 48,\n}\nconst codeStyles = {\n  color: \"#8A6534\",\n  padding: 4,\n  backgroundColor: \"#FFF4DB\",\n  fontSize: \"1.25rem\",\n  borderRadius: 4,\n}\n\ninterface Props {\n  data: {\n    allOpenapiYaml: {\n      edges: {\n        node: {\n          info: {\n            version: string;\n          };\n          openapi: string;\n          slug: string;\n          spec: string;\n        };\n      }[];\n    };\n  };\n}\n\nconst NotFoundPage = ({ data }: Props) => {\n  const {\n    allOpenapiYaml: { edges },\n  } = data;\n  const latestVerNum = semver.maxSatisfying(\n    edges.map((edge) => edge.node.info.version),\n    \"x\"\n  );\n  const latestVer = edges.find(\n    (edge) => edge.node.info.version === latestVerNum\n  );\n  const openApiStore = new OpenAPI({\n    spec: JSON.parse(latestVer.node.spec || \"{}\") as any as OpenAPISpec,\n  });\n  return (\n    <Layout openApiStore={openApiStore} selectedVersion={latestVer.node.slug}>\n      <main style={pageStyles}>\n      <title>Not found</title>\n      <h1 style={headingStyles}>Page not found</h1>\n      <p style={paragraphStyles}>\n        Sorry{\" \"}\n        <span role=\"img\" aria-label=\"Pensive emoji\">\n          ðŸ˜”\n        </span>{\" \"}\n        we couldnâ€™t find what you were looking for.\n        <br />\n        {process.env.NODE_ENV === \"development\" ? (\n          <>\n            <br />\n            Try creating a page in <code style={codeStyles}>src/pages/</code>.\n            <br />\n          </>\n        ) : null}\n        <br />\n        <Link to=\"/\">Go home</Link>.\n      </p>\n    </main>\n    </Layout>\n  );\n}\nexport const pageQuery = graphql`\n  query NotFoundPage {\n    allOpenapiYaml {\n      edges {\n        node {\n          info {\n            version\n          }\n          openapi\n          slug\n          spec\n        }\n      }\n    }\n  }\n`;\n\n\nexport default NotFoundPage\n"],"names":["pageStyles","color","padding","fontFamily","headingStyles","marginTop","marginBottom","maxWidth","paragraphStyles","edges","data","allOpenapiYaml","latestVerNum","semver","map","edge","node","info","version","latestVer","find","openApiStore","OpenAPI","spec","JSON","parse","selectedVersion","slug","style","role","Link","to"],"sourceRoot":""}