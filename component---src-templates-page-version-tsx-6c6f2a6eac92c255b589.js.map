{"version":3,"file":"component---src-templates-page-version-tsx-6c6f2a6eac92c255b589.js","mappings":"qQAQaA,GAAYC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,qEAiBTE,IAXiBF,EAAAA,EAAAA,IAAO,IAAPA,CAAH,iNACL,SAAAG,GAAK,OAAIA,EAAMC,MAAMC,QAAQC,QAAQC,QAChD,SAAAJ,GAAK,OAAIA,EAAMC,MAAMC,QAAQC,QAAQC,SASxBP,EAAAA,EAAAA,IAAO,OAAPA,CAAH,6MArBE,KAmCVQ,GAAkBR,EAAAA,EAAAA,IAAO,MAAPA,CAAH,6CAIfS,GAAcT,EAAAA,EAAAA,IAAO,MAAPA,CAAH,+KAvCD,I,oBCiBR,SAASU,EAAT,GAA2C,IAAxBC,EAAuB,EAAvBA,MAChC,EAA+BA,EAAMC,KAA7BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,aACRC,EACHF,EAAKE,SACJ,gBAACb,EAAD,gBACW,IACRW,EAAKE,QAAQC,WACZH,EAAKE,QAAQC,WAEb,qBAAGC,KAAMJ,EAAKE,QAAQG,KAAML,EAAKE,QAAQI,QAI/C,KAEIC,EACHP,EAAKQ,SAAWR,EAAKQ,QAAQH,KAC5B,gBAAChB,EAAD,aACO,qBAAGe,KAAMJ,EAAKQ,QAAQH,KAAML,EAAKQ,QAAQH,OAGlD,KAEII,EACHT,EAAKQ,SAAWR,EAAKQ,QAAQC,OAC5B,gBAACpB,EAAD,KACGW,EAAKQ,QAAQF,MAAQ,SADxB,IACmC,IACjC,qBAAGF,KAAM,UAAYJ,EAAKQ,QAAQC,OAAQT,EAAKQ,QAAQC,SAG3D,KAEIC,EACHV,EAAKW,gBACJ,gBAACtB,EAAD,KACE,qBAAGe,KAAMJ,EAAKW,gBAAd,sBAGJ,KAEIC,EAAWZ,EAAKY,SAAW,gCAAQZ,EAAKY,QAAb,MAAkC,KAEnE,OACE,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,KACE,gBAAC,IAAD,CAAaC,UAAU,YACrB,gBAAC7B,EAAD,KACGc,EAAKgB,MADR,IACgBJ,GAEhB,gBAAC,IAAD,MACKZ,EAAKE,SAAWF,EAAKQ,SAAWR,EAAKW,iBACtC,gBAAChB,EAAD,KACE,gBAACC,EAAD,KACGa,EADH,IACWF,EADX,IACqBL,EADrB,IAC+BQ,KAIjC,MAEJ,gBAACO,EAAA,EAAD,CACEC,IAAI,UACJC,OAAQrB,EAAMC,KAAKC,KAAKoB,QACxB,YAAU,kBAEZ,gBAACH,EAAA,EAAD,CACEE,OAAQrB,EAAMC,KAAKC,KAAKqB,YACxB,YAAU,sBAEXpB,GACC,gBAACqB,EAAAC,EAAD,CAAuBtB,aAAcA,O,wBChDlC,SAASuB,EAAT,GAAqD,IAA7BC,EAA4B,EAA5BA,KAEnCC,GAF+D,EAAtBC,YAGvCF,EADFC,aAEIE,EAAe,IAAIC,EAAAA,GAAQ,CAAC9B,KAAM+B,KAAKC,MAAML,EAAY3B,QAC/D,OACE,gBAACiC,EAAA,EAAD,CACEC,gBAAiBP,EAAYQ,KAC7BN,aAAcA,GAEd,gBAAC,WAAD,KACE,gBAACO,EAAA,EAAD,CAASnB,MAAOU,EAAY1B,KAAKgB,MAAQ,IAAMU,EAAY1B,KAAKY,UAChE,gBAAC,EAAD,CAASd,MAAO8B","sources":["webpack://documentation/./src/components/Redoc/ApiInfo/styled.elements.ts","webpack://documentation/./src/components/Redoc/ApiInfo/ApiInfo.tsx","webpack://documentation/./src/templates/page-version.tsx"],"sourcesContent":["import {styled} from \"@mui/material/styles\";\nimport {MiddlePanel} from \"../../common/Panels\";\nimport {H1, H3} from \"../../common/Headings\";\n\nconst delimiterWidth = 15;\n\nexport const ApiInfoWrap = MiddlePanel;\n\nexport const ApiHeader = styled(H3)`\n  margin-top: 0;\n  margin-bottom: 0.5em;\n\n`;\n\nexport const DownloadButton = styled('a')`\n  border: 1px solid ${props => props.theme.palette.primary.main};\n  color: ${props => props.theme.palette.primary.main};\n  font-weight: normal;\n  margin-left: 0.5em;\n  padding: 4px 8px 4px;\n  display: inline-block;\n  text-decoration: none;\n  cursor: pointer;\n`;\n\nexport const InfoSpan = styled('span')`\n  &::before {\n    content: '|';\n    display: inline-block;\n    opacity: 0.5;\n    width: ${delimiterWidth}px;\n    text-align: center;\n  }\n\n  &:last-child::after {\n    display: none;\n  }\n`;\n\nexport const InfoSpanBoxWrap = styled('div')`\n  overflow: hidden;\n`;\n\nexport const InfoSpanBox = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n  // hide separator on new lines: idea from https://stackoverflow.com/a/31732902/1749888\n  margin-left: -${delimiterWidth}px;\n`;\n","import * as React from \"react\";\n\nimport { OpenAPI } from \"../../../services/OpenAPI\";\n\nimport { ExternalDocumentation } from \"../ExternalDocumentation/ExternalDocumentation\";\nimport { Markdown } from \"../Markdown/Markdown\";\nimport { StyledMarkdownBlock } from \"../Markdown/styled.elements\";\nimport {\n  ApiHeader,\n  InfoSpan,\n  InfoSpanBox,\n  InfoSpanBoxWrap,\n} from \"./styled.elements\";\nimport { Row } from \"../../common/Row\";\nimport {MiddlePanel} from \"../../common/Panels\";\nimport { Section } from \"../../common/Section\";\n\nexport interface ApiInfoProps {\n  store: OpenAPI;\n}\n\nexport default function ApiInfo({ store }: ApiInfoProps) {\n  const { info, externalDocs } = store.spec;\n  const license =\n    (info.license && (\n      <InfoSpan>\n        License:{\" \"}\n        {info.license.identifier ? (\n          info.license.identifier\n        ) : (\n          <a href={info.license.url}>{info.license.name}</a>\n        )}\n      </InfoSpan>\n    )) ||\n    null;\n\n  const website =\n    (info.contact && info.contact.url && (\n      <InfoSpan>\n        URL: <a href={info.contact.url}>{info.contact.url}</a>\n      </InfoSpan>\n    )) ||\n    null;\n\n  const email =\n    (info.contact && info.contact.email && (\n      <InfoSpan>\n        {info.contact.name || \"E-mail\"}:{\" \"}\n        <a href={\"mailto:\" + info.contact.email}>{info.contact.email}</a>\n      </InfoSpan>\n    )) ||\n    null;\n\n  const terms =\n    (info.termsOfService && (\n      <InfoSpan>\n        <a href={info.termsOfService}>Terms of Service</a>\n      </InfoSpan>\n    )) ||\n    null;\n\n  const version = (info.version && <span>({info.version})</span>) || null;\n\n  return (\n    <Section>\n      <Row>\n        <MiddlePanel className=\"api-info\">\n          <ApiHeader>\n            {info.title} {version}\n          </ApiHeader>\n          <StyledMarkdownBlock>\n            {((info.license || info.contact || info.termsOfService) && (\n              <InfoSpanBoxWrap>\n                <InfoSpanBox>\n                  {email} {website} {license} {terms}\n                </InfoSpanBox>\n              </InfoSpanBoxWrap>\n            )) ||\n              null}\n          </StyledMarkdownBlock>\n          <Markdown\n            key=\"summary\"\n            source={store.spec.info.summary}\n            data-role=\"redoc-summary\"\n          />\n          <Markdown\n            source={store.spec.info.description}\n            data-role=\"redoc-description\"\n          />\n          {externalDocs && (\n            <ExternalDocumentation externalDocs={externalDocs} />\n          )}\n        </MiddlePanel>\n      </Row>\n    </Section>\n  );\n}\n","import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../components/Layout/Layout\";\nimport { PageContext } from \"gatsby/internal\";\nimport AppInfo from '../components/Redoc/ApiInfo/ApiInfo'\nimport {OpenAPI} from \"../services/OpenAPI\";\nimport {OpenAPISpec} from \"../types/OpenAPISpec\";\nimport DocHead from \"../components/Layout/DocHead\";\n\ninterface Props {\n  data: {\n    openapiYaml: {\n      info: {\n        contact: {\n          email: string;\n          url: string;\n        };\n        description: string;\n        termsOfService: string;\n        title: string;\n        version: string;\n      };\n      openapi: string;\n      x_tagGroups: {\n        name: string;\n        tags: {\n          name: string;\n          slug: string;\n        };\n        slug: string;\n      }[];\n      spec: string,\n      slug: string;\n      tags: {\n        description: string;\n        name: string;\n      };\n    };\n  };\n  pageContext: PageContext;\n}\n\nexport default function PageTemplate({ data, pageContext }: Props) {\n  const {\n    openapiYaml,\n  } = data;\n  const openApiStore = new OpenAPI({spec: JSON.parse(openapiYaml.spec) as any as OpenAPISpec});\n  return (\n    <Layout\n      selectedVersion={openapiYaml.slug}\n      openApiStore={openApiStore}\n    >\n      <React.Fragment>\n        <DocHead title={openapiYaml.info.title + ' ' + openapiYaml.info.version}/>\n        <AppInfo store={openApiStore}/>\n      </React.Fragment>\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query ($verid: String!) {\n    openapiYaml(id: { eq: $verid }) {\n      info {\n        contact {\n          email\n          url\n        }\n        description\n        termsOfService\n        title\n        version\n      }\n      openapi\n      x_tagGroups {\n        name\n        section\n        tags {\n          name\n          slug\n        }\n        slug\n      }\n      spec\n      slug\n      tags {\n        description\n        name\n      }\n    }\n  }\n`;\n"],"names":["ApiHeader","styled","H3","InfoSpan","props","theme","palette","primary","main","InfoSpanBoxWrap","InfoSpanBox","ApiInfo","store","spec","info","externalDocs","license","identifier","href","url","name","website","contact","email","terms","termsOfService","version","Section","Row","className","title","Markdown","key","source","summary","description","ExternalDocumentation","E","PageTemplate","data","openapiYaml","pageContext","openApiStore","OpenAPI","JSON","parse","Layout","selectedVersion","slug","DocHead"],"sourceRoot":""}