{"version":3,"file":"component---src-templates-page-schema-template-tsx-ba1f6480f9a4f93ea1a1.js","mappings":"yTAoBe,SAASA,EAAT,GAA0D,IAAxCC,EAAuC,EAAvCA,eAAgBC,EAAuB,EAAvBA,aACzCC,EAAS,IAAIC,EAAAA,EACjBF,EACAA,EAAaG,KAAKC,WAAWC,QAAQN,GACrC,GACA,IAGIO,EAAW,CACf,YAAa,IAAIC,EAAAA,EACfP,EACA,aACA,EACA,CACEC,OAAQD,EAAaG,KAAKC,WAAWC,QAAQN,IAE/C,CACES,uBAAuB,EACvBC,gCAAiC,KAGrC,eAAgB,IAAIF,EAAAA,EAClBP,EACA,gBACA,EACA,CACEC,OAAQD,EAAaG,KAAKC,WAAWC,QAAQN,IAE/C,CACES,uBAAuB,EACvBC,gCAAiC,MAIjCC,EAAeC,OAAOC,KAAKN,GACjC,GAA8CO,EAAAA,EAAAA,UAASH,EAAa,IAA7DI,EAAP,KAAwBC,EAAxB,KAEMC,EAAsB,SAC1BC,EACAC,GAEkB,OAAdA,GACFH,EAAmBG,IAGvB,OACE,gBAAC,WAAD,KACE,gBAACC,EAAA,EAAD,CAAaC,KAAMnB,IACnB,gBAACoB,EAAA,EAAD,KACE,gBAAC,IAAD,CAAaC,SAAS,GACpB,gBAACC,EAAA,EAAD,CAAYtB,OAAQA,KAEtB,gBAAC,IAAD,KACE,gBAACuB,EAAA,GAAD,CACEJ,MAAI,EACJK,GAAI,GACJC,GAAI,CAAEC,GAAI,EAAGC,gBAAiB,SAACC,GAAD,OAAWA,EAAMC,QAAQC,KAAK,QAE5D,gBAACP,EAAA,GAAD,CAAMQ,WAAS,EAACC,QAAS,EAAGP,GAAI,CAAEQ,EAAG,EAAGC,GAAI,IAC1C,gBAACX,EAAA,GAAD,CAAMJ,MAAI,EAACK,GAAI,IACZf,EAAa0B,KAAI,SAACC,GAAD,OAChB,gBAAC,IAAD,CACEC,IAAKD,EACLX,GAAI,CAAEa,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACtCC,MAAO,CACLC,WAAY/B,IAAoBuB,EAAY,IAAM,KAEpDS,MAAO,YACPC,SAAUjC,IAAoBuB,EAC9BW,MAAOX,EACPY,SAAUjC,GAETqB,QAKT,gBAACb,EAAA,GAAD,CAAMJ,MAAI,EAACK,GAAI,IACiB,MAA7BnB,EAASQ,KAA4BoC,EAAAA,EAAAA,MACpC,gBAAC,IAAD,CACErB,MAAO,UACPsB,IAAK7C,EAASQ,GAAiBR,SAAS8C,QAAQJ,MAChDK,UAAW,EACXC,MAAM,EACNC,2BAA4B,U,cCpC/B,SAASC,EAAT,GAAqD,IAAD,EAA5BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,YAEzCC,EAKEF,EALFE,YACAC,EAIEH,EAJFG,eAKIC,GADFJ,EAHFK,KACEC,aAAgBC,YAGEC,EAAAA,EAAAA,IAAgBL,EAAeM,MAAM9B,KAAI,SAAC+B,GAAD,OAAaA,EAAQC,KAAKC,aACnFrE,EAAe,IAAIsE,EAAAA,GAAQ,CAC/BnE,KAAMoE,KAAKC,MAAMb,EAAYxD,MAC7BsE,YAAad,EAAYS,KAAKC,UAAYR,EAAgB,SAAWF,EAAYe,OAE7E3E,EAAiB4D,MAAAA,GAAH,UAAGA,EAAatD,eAAhB,aAAG,EAAsBsE,MAC3C,SAAC1E,GAAD,OAAYA,EAAOyE,OAAShB,EAAYzD,UAE1C,OACE,gBAAC2E,EAAA,EAAD,CACEC,gBAAiBlB,EAAYe,KAC7B3E,eAAgB2D,EAAYzD,OAC5BD,aAAcA,GAEd,gBAAC,WAAD,KACE,gBAAC8E,EAAA,EAAD,CACEC,MAAOrB,EAAYzD,OAAS,OAAS0D,EAAYS,KAAKC,UAExD,gBAACvE,EAAD,CACEC,eAAgBA,EAAeuD,KAC/BtD,aAAcA","sources":["webpack://documentation/./src/components/Redoc/Schema/Schema.tsx","webpack://documentation/./src/templates/page-schema-template.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { OpenAPI } from \"../../../services/OpenAPI\";\nimport SectionItem from \"../ContentItems/SectionItem\";\nimport SchemaItem from \"../ContentItems/components/SchemaItem\";\nimport { SchemaModel } from \"../../../services/models/SchemaModel\";\nimport { MediaTypeModel } from \"../../../services/models/MediaTypeModel\";\nimport { OpenAPIV3_1 } from \"openapi-types\";\nimport { Row } from \"../../common/Row\";\nimport { MiddlePanel, RightPanel } from \"../../common/Panels\";\nimport Grid from \"@mui/material/Grid\";\nimport { isBrowser } from \"../Markdown/SanitizedMdBlock\";\nimport ReactJson from \"react-json-view\";\nimport { useState } from \"react\";\nimport { StyledToggleButton } from \"../ContentItems/components/ExamplesItem\";\n\ninterface Props {\n  selectedSchema: string;\n  openApiStore: OpenAPI;\n}\n\nexport default function Schema({ selectedSchema, openApiStore }: Props) {\n  const schema = new SchemaModel(\n    openApiStore,\n    openApiStore.spec.components.schemas[selectedSchema],\n    \"\",\n    {}\n  );\n\n  const examples = {\n    \"Full json\": new MediaTypeModel(\n      openApiStore,\n      \"Full json\",\n      false,\n      {\n        schema: openApiStore.spec.components.schemas[selectedSchema],\n      } as any as OpenAPIV3_1.MediaTypeObject,\n      {\n        onlyRequiredInSamples: false,\n        generatedPayloadSamplesMaxDepth: 12,\n      }\n    ),\n    \"Minimal json\": new MediaTypeModel(\n      openApiStore,\n      \"Minimal json\",\n      false,\n      {\n        schema: openApiStore.spec.components.schemas[selectedSchema],\n      } as any as OpenAPIV3_1.MediaTypeObject,\n      {\n        onlyRequiredInSamples: true,\n        generatedPayloadSamplesMaxDepth: 12,\n      }\n    ),\n  };\n  const exampleNames = Object.keys(examples);\n  const [selectedExample, setSelectedExample] = useState(exampleNames[0]);\n\n  const handleExampleChange = (\n    event: React.MouseEvent<HTMLElement>,\n    newParent: string | null\n  ) => {\n    if (newParent !== null) {\n      setSelectedExample(newParent);\n    }\n  };\n  return (\n    <React.Fragment>\n      <SectionItem item={schema} />\n      <Row>\n        <MiddlePanel compact={false}>\n          <SchemaItem schema={schema} />\n        </MiddlePanel>\n        <RightPanel>\n          <Grid\n            item\n            xs={12}\n            sx={{ mt: 1, backgroundColor: (theme) => theme.palette.grey[900] }}\n          >\n            <Grid container spacing={2} sx={{ m: 1, ml: 0 }}>\n              <Grid item xs={12}>\n                {exampleNames.map((parentKey) => (\n                  <StyledToggleButton\n                    key={parentKey}\n                    sx={{ mr: 1, pl: 2, pr: 2, pt: 0, pb: 0 }}\n                    style={{\n                      fontWeight: selectedExample === parentKey ? 700 : 400,\n                    }}\n                    color={\"secondary\"}\n                    selected={selectedExample === parentKey}\n                    value={parentKey}\n                    onChange={handleExampleChange}\n                  >\n                    {parentKey}\n                  </StyledToggleButton>\n                ))}\n              </Grid>\n            </Grid>\n            <Grid item xs={12}>\n              {examples[selectedExample] != null && isBrowser() && (\n                <ReactJson\n                  theme={\"monokai\"}\n                  src={examples[selectedExample].examples.default.value}\n                  collapsed={1}\n                  name={false}\n                  collapseStringsAfterLength={10}\n                />\n              )}\n            </Grid>\n          </Grid>\n        </RightPanel>\n      </Row>\n    </React.Fragment>\n  );\n}\n","import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../components/Layout/Layout\";\nimport { PageContext } from \"gatsby/internal\";\nimport { OpenAPI } from \"../services/OpenAPI\";\nimport { OpenAPISpec } from \"../types/OpenAPISpec\";\nimport Group from \"../components/Redoc/Group/Group\";\nimport DocHead from \"../components/Layout/DocHead\";\nimport Schema from \"../components/Redoc/Schema/Schema\";\nimport {getLatestSemver} from \"../utils\";\n\ninterface Props {\n  data: {\n    openapiYaml: {\n      info: {\n        contact: {\n          email: string;\n          url: string;\n        };\n        description: string;\n        termsOfService: string;\n        title: string;\n        version: string;\n      };\n      openapi: string;\n      x_tagGroups: {\n        name: string;\n        section: string;\n        tags: {\n          name: string;\n          slug: string;\n        };\n        slug: string;\n      }[];\n      schemas: {\n        name: string;\n        slug: string;\n        doNotRender: boolean | null;\n      }[];\n      spec: string;\n      slug: string;\n      tags: {\n        description: string;\n        name: string;\n      };\n    };\n    allOpenapiYaml: {\n      nodes: [\n        {\n          info: {\n            version: string;\n          };\n          slug: string;\n        }\n      ]\n    };\n    site: {\n      siteMetadata: {\n        categories: {\n          name: string;\n          key: string;\n        }[];\n      };\n    };\n  };\n  pageContext: PageContext;\n}\n\nexport default function PageTemplate({ data, pageContext }: Props) {\n  const {\n    openapiYaml,\n    allOpenapiYaml,\n    site: {\n      siteMetadata: { categories },\n    },\n  } = data;\n  const latestVersion = getLatestSemver(allOpenapiYaml.nodes.map((openapi) => openapi.info.version));\n  const openApiStore = new OpenAPI({\n    spec: JSON.parse(openapiYaml.spec) as any as OpenAPISpec,\n    versionSlug: openapiYaml.info.version === latestVersion ? 'latest' : openapiYaml.slug,\n  });\n  const selectedSchema = openapiYaml?.schemas?.find(\n    (schema) => schema.slug === pageContext.schema\n  );\n  return (\n    <Layout\n      selectedVersion={openapiYaml.slug}\n      selectedSchema={pageContext.schema}\n      openApiStore={openApiStore}\n    >\n      <React.Fragment>\n        <DocHead\n          title={pageContext.schema + \" - v\" + openapiYaml.info.version}\n        />\n        <Schema\n          selectedSchema={selectedSchema.name}\n          openApiStore={openApiStore}\n        />\n      </React.Fragment>\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query VersionWithSchema($verid: String!, $schema: String!) {\n    openapiYaml(\n      schemas: { elemMatch: { slug: { eq: $schema } } }\n      id: { eq: $verid }\n    ) {\n      info {\n        contact {\n          email\n          url\n        }\n        description\n        termsOfService\n        title\n        version\n      }\n      openapi\n      x_tagGroups {\n        name\n        section\n        tags {\n          name\n          slug\n        }\n        slug\n      }\n      schemas {\n        slug\n        name\n        doNotRender\n      }\n      spec\n      slug\n      tags {\n        description\n        name\n      }\n    }\n    allOpenapiYaml {\n      nodes {\n        info {\n          version\n        }\n        slug\n      }\n    }\n    site {\n      siteMetadata {\n        categories {\n          name\n          key\n        }\n      }\n    }\n  }\n`;\n"],"names":["Schema","selectedSchema","openApiStore","schema","SchemaModel","spec","components","schemas","examples","MediaTypeModel","onlyRequiredInSamples","generatedPayloadSamplesMaxDepth","exampleNames","Object","keys","useState","selectedExample","setSelectedExample","handleExampleChange","event","newParent","SectionItem","item","Row","compact","SchemaItem","Grid","xs","sx","mt","backgroundColor","theme","palette","grey","container","spacing","m","ml","map","parentKey","key","mr","pl","pr","pt","pb","style","fontWeight","color","selected","value","onChange","isBrowser","src","default","collapsed","name","collapseStringsAfterLength","PageTemplate","data","pageContext","openapiYaml","allOpenapiYaml","latestVersion","site","siteMetadata","categories","getLatestSemver","nodes","openapi","info","version","OpenAPI","JSON","parse","versionSlug","slug","find","Layout","selectedVersion","DocHead","title"],"sourceRoot":""}