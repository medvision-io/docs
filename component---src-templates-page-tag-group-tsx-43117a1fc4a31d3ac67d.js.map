{"version":3,"file":"component---src-templates-page-tag-group-tsx-43117a1fc4a31d3ac67d.js","mappings":"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","sources":["webpack://documentation/./src/components/common/Section.tsx","webpack://documentation/./src/utils/useOnScreen.tsx","webpack://documentation/./src/components/Redoc/ContentItems/ContentItem.tsx","webpack://documentation/./src/components/Redoc/ContentItems/ContentItems.tsx","webpack://documentation/./src/components/Redoc/Group/Group.tsx","webpack://documentation/./src/templates/page-tag-group.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { styled, ThemedProps } from \"@mui/material/styles\";\nimport { Theme } from \"@emotion/react\";\nimport { ReactElement, useContext, useEffect, useRef } from \"react\";\nimport useOnScreen from \"../../utils/useOnScreen\";\nimport { ActionKind, NavigationContext } from \"../Layout/NavigationContext\";\n\ninterface SectionDivProps {\n  underlined?: boolean;\n  theme?: Theme;\n}\n\nexport const SectionDiv = styled(\"div\")<SectionDivProps>`\n  padding: ${(props) => props.theme.spacing(4)}px 0;\n\n  &:last-child {\n    min-height: calc(100vh + 1px);\n  }\n\n  & > &:last-child {\n    min-height: initial;\n  }\n\n  ${(props) => props.theme.breakpoints.down(\"md\")} {\n    padding: 0;\n  }\n  ${(props: SectionDivProps) =>\n    (props.underlined &&\n      `\n    position: relative;\n\n    &:not(:last-of-type):after {\n      position: absolute;\n      bottom: 0;\n      width: 100%;\n      display: block;\n      content: '';\n      border-bottom: 1px solid rgba(0, 0, 0, 0.2);\n    }\n  `) ||\n    \"\"}\n`;\n\ninterface SectionProps extends SectionDivProps {\n  id?: string;\n  underlined?: boolean;\n  children: ReactElement;\n}\n\nexport const Section = ({ id, underlined, children }: SectionProps) => {\n  const ref = useRef();\n  const [state, dispatch] = useContext(NavigationContext);\n  const isVisible = useOnScreen(ref, () => {});\n\n  useEffect(() => {\n    if (isVisible) {\n      dispatch({\n        type: ActionKind.ADD_VISIBLE_ELEMENT,\n        value: id,\n        field: null,\n      });\n    } else {\n      dispatch({\n        type: ActionKind.REMOVE_VISIBLE_ELEMENT,\n        value: id,\n        field: null,\n      });\n    }\n  }, [isVisible]);\n  return (\n    <SectionDiv id={id} underlined={underlined} ref={ref}>\n      {children}\n    </SectionDiv>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport {isBrowser} from \"../components/Redoc/Markdown/SanitizedMdBlock\";\n\nexport default function useOnScreen(ref, callback) {\n  const [isIntersecting, setIntersecting] = useState(false);\n\n  if(!isBrowser()) {\n    return false;\n  }\n  const observer = new IntersectionObserver(([entry]) => {\n    setIntersecting(entry.isIntersecting);\n    if (callback) {\n      callback(entry.isIntersecting);\n    }\n  });\n\n  useEffect(() => {\n    observer.observe(ref.current);\n    // Remove the observer as soon as the component is unmounted\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  return isIntersecting;\n}\n","import * as React from \"react\";\nimport { Section } from \"../../common/Section\";\nimport ContentItems from \"./ContentItems\";\nimport SectionItem from \"./SectionItem\";\nimport OperationItem from \"./OperationItem\";\n\ninterface Props {\n  item: any;\n}\n\nexport default function ContentItem({ item }: Props) {\n  let content;\n  const { type } = item;\n  switch (type) {\n    case 'group':\n      content = null;\n      break;\n    case 'tag':\n    case 'section':\n      content = <SectionItem item={item} />;\n      break;\n    case 'operation':\n      content = <OperationItem item={item} />;\n      break;\n    default:\n      content = <SectionItem item={item} />;\n  }\n\n  return (\n    <React.Fragment>\n      {content != null && (\n        <Section id={item.urlId} underlined={item.type === 'operation'}>\n          {content}\n        </Section>\n      )}\n      {item.items && <ContentItems items={item.items} />}\n    </React.Fragment>\n  );\n}\n","import * as React from \"react\";\nimport ContentItem from \"./ContentItem\";\n\ninterface Props {\n  items: any[];\n}\n\nexport default function ContentItems({ items }: Props) {\n  if (items.length === 0) {\n    return null;\n  }\n  return (\n    <React.Fragment>\n      {items.map((item) => {\n        return <ContentItem key={item.id} item={item} />;\n      })}\n    </React.Fragment>\n  );\n}\n","import * as React from \"react\";\nimport ContentItems from \"../ContentItems/ContentItems\";\nimport { OpenAPI } from \"../../../services/OpenAPI\";\nimport SectionItem from \"../ContentItems/SectionItem\";\n\ninterface Props {\n  selectedGroup: string;\n  openApiStore: OpenAPI;\n}\n\nexport default function Group({ selectedGroup, openApiStore }: Props) {\n  const groups = openApiStore.spec[\"x-tagGroups\"].filter(\n    (group) => group.slug === selectedGroup\n  );\n\n  return (\n    <React.Fragment>\n      {groups.map((group) => (\n        <React.Fragment key={`group-${group.slug}`}>\n          {group.tags.map((tag) => (\n            <React.Fragment key={`tag-${tag}`}>\n              <SectionItem item={openApiStore.items[tag]} />\n              <ContentItems items={openApiStore.items[tag].items} />\n            </React.Fragment>\n          ))}\n          {openApiStore.items[group.name] != null && (\n            <ContentItems items={openApiStore.items[group.name].items} />\n          )}\n        </React.Fragment>\n      ))}\n      ;\n    </React.Fragment>\n  );\n}\n","import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../components/Layout/Layout\";\nimport { PageContext } from \"gatsby/internal\";\nimport { OpenAPI } from \"../services/OpenAPI\";\nimport { OpenAPISpec } from \"../types/OpenAPISpec\";\nimport Group from \"../components/Redoc/Group/Group\";\nimport DocHead from \"../components/Layout/DocHead\";\nimport {getLatestSemver} from \"../utils\";\n\ninterface Props {\n  data: {\n    openapiYaml: {\n      info: {\n        contact: {\n          email: string;\n          url: string;\n        };\n        description: string;\n        termsOfService: string;\n        title: string;\n        version: string;\n      };\n      openapi: string;\n      x_tagGroups: {\n        name: string;\n        section: string;\n        tags: {\n          name: string;\n          slug: string;\n        };\n        slug: string;\n      }[];\n      spec: string;\n      slug: string;\n      tags: {\n        description: string;\n        name: string;\n      };\n    };\n    allOpenapiYaml: {\n      nodes: [\n        {\n          info: {\n            version: string;\n          };\n          slug: string;\n        }\n      ]\n    };\n    site: {\n      siteMetadata: {\n        categories: {\n          name: string;\n          key: string;\n        }[];\n      };\n    };\n  };\n  pageContext: PageContext;\n}\n\nexport default function PageTemplate({ data, pageContext }: Props) {\n  const {\n    openapiYaml,\n    allOpenapiYaml,\n    site: {\n      siteMetadata: { categories },\n    },\n  } = data;\n  const latestVersion = getLatestSemver(allOpenapiYaml.nodes.map((openapi) => openapi.info.version));\n  const openApiStore = new OpenAPI({\n    spec: JSON.parse(openapiYaml.spec) as any as OpenAPISpec,\n    versionSlug: openapiYaml.info.version === latestVersion ? 'latest' : openapiYaml.slug,\n  });\n  const selectedGroup = openapiYaml?.x_tagGroups?.find(\n    (group) => group.slug === pageContext.group\n  );\n  const selectedCategory = categories.find(\n    (cat) => cat.key === selectedGroup?.section\n  );\n  return (\n    <Layout\n      selectedVersion={openapiYaml.slug}\n      selectedTagGroup={pageContext.group}\n      openApiStore={openApiStore}\n    >\n      <React.Fragment>\n        <DocHead\n          title={\n            selectedGroup.name +\n            \" - \" +\n            selectedCategory.name +\n            \" - v\" +\n            openapiYaml.info.version\n          }\n        />\n        <Group selectedGroup={pageContext.group} openApiStore={openApiStore} />\n      </React.Fragment>\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query VersionWithGroup($verid: String!, $group: String!) {\n    openapiYaml(\n      x_tagGroups: { elemMatch: { slug: { eq: $group } } }\n      id: { eq: $verid }\n    ) {\n      info {\n        contact {\n          email\n          url\n        }\n        description\n        termsOfService\n        title\n        version\n      }\n      openapi\n      x_tagGroups {\n        name\n        section\n        tags {\n          name\n          slug\n        }\n        slug\n      }\n      spec\n      slug\n      tags {\n        description\n        name\n      }\n    }\n    allOpenapiYaml {\n      nodes {\n        info {\n          version\n        }\n        slug\n      }\n    }\n    site {\n      siteMetadata {\n        categories {\n          name\n          key\n        }\n      }\n    }\n  }\n`;\n"],"names":["SectionDiv","styled","props","theme","spacing","breakpoints","down","underlined","Section","id","children","ref","useRef","useContext","NavigationContext","dispatch","isVisible","callback","useState","isIntersecting","setIntersecting","isBrowser","observer","IntersectionObserver","entry","useEffect","observe","current","disconnect","useOnScreen","type","ActionKind","value","field","ContentItem","content","item","SectionItem","OperationItem","urlId","items","ContentItems","length","map","key","Group","selectedGroup","openApiStore","groups","spec","filter","group","slug","tags","tag","name","PageTemplate","data","pageContext","openapiYaml","allOpenapiYaml","categories","site","siteMetadata","latestVersion","getLatestSemver","nodes","openapi","info","version","OpenAPI","JSON","parse","versionSlug","x_tagGroups","find","selectedCategory","cat","section","Layout","selectedVersion","selectedTagGroup","DocHead","title"],"sourceRoot":""}