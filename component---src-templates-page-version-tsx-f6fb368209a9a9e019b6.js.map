{"version":3,"file":"component---src-templates-page-version-tsx-f6fb368209a9a9e019b6.js","mappings":"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","sources":["webpack://documentation/./src/components/common/Section.tsx","webpack://documentation/./src/utils/useOnScreen.tsx","webpack://documentation/./src/components/Redoc/ApiInfo/styled.elements.ts","webpack://documentation/./src/components/Redoc/ApiInfo/ApiInfo.tsx","webpack://documentation/./src/templates/page-version.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { styled, ThemedProps } from \"@mui/material/styles\";\nimport { Theme } from \"@emotion/react\";\nimport { ReactElement, useContext, useEffect, useRef } from \"react\";\nimport useOnScreen from \"../../utils/useOnScreen\";\nimport { ActionKind, NavigationContext } from \"../Layout/NavigationContext\";\n\ninterface SectionDivProps {\n  underlined?: boolean;\n  theme?: Theme;\n}\n\nexport const SectionDiv = styled(\"div\")<SectionDivProps>`\n  padding: ${(props) => props.theme.spacing(4)}px 0;\n\n  &:last-child {\n    min-height: calc(100vh + 1px);\n  }\n\n  & > &:last-child {\n    min-height: initial;\n  }\n\n  ${(props) => props.theme.breakpoints.down(\"md\")} {\n    padding: 0;\n  }\n  ${(props: SectionDivProps) =>\n    (props.underlined &&\n      `\n    position: relative;\n\n    &:not(:last-of-type):after {\n      position: absolute;\n      bottom: 0;\n      width: 100%;\n      display: block;\n      content: '';\n      border-bottom: 1px solid rgba(0, 0, 0, 0.2);\n    }\n  `) ||\n    \"\"}\n`;\n\ninterface SectionProps extends SectionDivProps {\n  id?: string;\n  underlined?: boolean;\n  children: ReactElement;\n}\n\nexport const Section = ({ id, underlined, children }: SectionProps) => {\n  const ref = useRef();\n  const [state, dispatch] = useContext(NavigationContext);\n  const isVisible = useOnScreen(ref, () => {});\n\n  useEffect(() => {\n    if (isVisible) {\n      dispatch({\n        type: ActionKind.ADD_VISIBLE_ELEMENT,\n        value: id,\n        field: null,\n      });\n    } else {\n      dispatch({\n        type: ActionKind.REMOVE_VISIBLE_ELEMENT,\n        value: id,\n        field: null,\n      });\n    }\n  }, [isVisible]);\n  return (\n    <SectionDiv id={id} underlined={underlined} ref={ref}>\n      {children}\n    </SectionDiv>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport {isBrowser} from \"../components/Redoc/Markdown/SanitizedMdBlock\";\n\nexport default function useOnScreen(ref, callback) {\n  const [isIntersecting, setIntersecting] = useState(false);\n\n  if(!isBrowser()) {\n    return false;\n  }\n  const observer = new IntersectionObserver(([entry]) => {\n    setIntersecting(entry.isIntersecting);\n    if (callback) {\n      callback(entry.isIntersecting);\n    }\n  });\n\n  useEffect(() => {\n    observer.observe(ref.current);\n    // Remove the observer as soon as the component is unmounted\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  return isIntersecting;\n}\n","import {styled} from \"@mui/material/styles\";\nimport {MiddlePanel} from \"../../common/Panels\";\nimport {H1, H3} from \"../../common/Headings\";\n\nconst delimiterWidth = 15;\n\nexport const ApiInfoWrap = MiddlePanel;\n\nexport const ApiHeader = styled(H3)`\n  margin-top: 0;\n  margin-bottom: 0.5em;\n\n`;\n\nexport const DownloadButton = styled('a')`\n  border: 1px solid ${props => props.theme.palette.primary.main};\n  color: ${props => props.theme.palette.primary.main};\n  font-weight: normal;\n  margin-left: 0.5em;\n  padding: 4px 8px 4px;\n  display: inline-block;\n  text-decoration: none;\n  cursor: pointer;\n`;\n\nexport const InfoSpan = styled('span')`\n  &::before {\n    content: '|';\n    display: inline-block;\n    opacity: 0.5;\n    width: ${delimiterWidth}px;\n    text-align: center;\n  }\n\n  &:last-child::after {\n    display: none;\n  }\n`;\n\nexport const InfoSpanBoxWrap = styled('div')`\n  overflow: hidden;\n`;\n\nexport const InfoSpanBox = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n  // hide separator on new lines: idea from https://stackoverflow.com/a/31732902/1749888\n  margin-left: -${delimiterWidth}px;\n`;\n","import * as React from \"react\";\n\nimport { OpenAPI } from \"../../../services/OpenAPI\";\n\nimport { ExternalDocumentation } from \"../ExternalDocumentation/ExternalDocumentation\";\nimport { Markdown } from \"../Markdown/Markdown\";\nimport { StyledMarkdownBlock } from \"../Markdown/styled.elements\";\nimport {\n  ApiHeader,\n  InfoSpan,\n  InfoSpanBox,\n  InfoSpanBoxWrap,\n} from \"./styled.elements\";\nimport { Row } from \"../../common/Row\";\nimport {MiddlePanel} from \"../../common/Panels\";\nimport { Section } from \"../../common/Section\";\n\nexport interface ApiInfoProps {\n  store: OpenAPI;\n}\n\nexport default function ApiInfo({ store }: ApiInfoProps) {\n  const { info, externalDocs } = store.spec;\n  const license =\n    (info.license && (\n      <InfoSpan>\n        License:{\" \"}\n        {info.license.identifier ? (\n          info.license.identifier\n        ) : (\n          <a href={info.license.url}>{info.license.name}</a>\n        )}\n      </InfoSpan>\n    )) ||\n    null;\n\n  const website =\n    (info.contact && info.contact.url && (\n      <InfoSpan>\n        URL: <a href={info.contact.url}>{info.contact.url}</a>\n      </InfoSpan>\n    )) ||\n    null;\n\n  const email =\n    (info.contact && info.contact.email && (\n      <InfoSpan>\n        {info.contact.name || \"E-mail\"}:{\" \"}\n        <a href={\"mailto:\" + info.contact.email}>{info.contact.email}</a>\n      </InfoSpan>\n    )) ||\n    null;\n\n  const terms =\n    (info.termsOfService && (\n      <InfoSpan>\n        <a href={info.termsOfService}>Terms of Service</a>\n      </InfoSpan>\n    )) ||\n    null;\n\n  const version = (info.version && <span>({info.version})</span>) || null;\n\n  return (\n    <Section>\n      <Row>\n        <MiddlePanel className=\"api-info\">\n          <ApiHeader>\n            {info.title} {version}\n          </ApiHeader>\n          <StyledMarkdownBlock>\n            {((info.license || info.contact || info.termsOfService) && (\n              <InfoSpanBoxWrap>\n                <InfoSpanBox>\n                  {email} {website} {license} {terms}\n                </InfoSpanBox>\n              </InfoSpanBoxWrap>\n            )) ||\n              null}\n          </StyledMarkdownBlock>\n          <Markdown\n            key=\"summary\"\n            source={store.spec.info.summary}\n            data-role=\"redoc-summary\"\n          />\n          <Markdown\n            source={store.spec.info.description}\n            data-role=\"redoc-description\"\n          />\n          {externalDocs && (\n            <ExternalDocumentation externalDocs={externalDocs} />\n          )}\n        </MiddlePanel>\n      </Row>\n    </Section>\n  );\n}\n","import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../components/Layout/Layout\";\nimport { PageContext } from \"gatsby/internal\";\nimport AppInfo from \"../components/Redoc/ApiInfo/ApiInfo\";\nimport { OpenAPI } from \"../services/OpenAPI\";\nimport { OpenAPISpec } from \"../types/OpenAPISpec\";\nimport DocHead from \"../components/Layout/DocHead\";\nimport {getLatestSemver} from \"../utils\";\n\ninterface Props {\n  data: {\n    openapiYaml: {\n      info: {\n        contact: {\n          email: string;\n          url: string;\n        };\n        description: string;\n        termsOfService: string;\n        title: string;\n        version: string;\n      };\n      openapi: string;\n      x_tagGroups: {\n        name: string;\n        tags: {\n          name: string;\n          slug: string;\n        };\n        slug: string;\n      }[];\n      spec: string;\n      slug: string;\n      tags: {\n        description: string;\n        name: string;\n      };\n    };\n    allOpenapiYaml: {\n      nodes: [\n        {\n          info: {\n            version: string;\n          };\n          slug: string;\n        }\n      ]\n    };\n  };\n  pageContext: PageContext;\n}\n\nexport default function PageTemplate({ data, pageContext }: Props) {\n  const { openapiYaml, allOpenapiYaml } = data;\n  const latestVersion = getLatestSemver(allOpenapiYaml.nodes.map((openapi) => openapi.info.version));\n  const openApiStore = new OpenAPI({\n    spec: JSON.parse(openapiYaml.spec) as any as OpenAPISpec,\n    versionSlug: openapiYaml.info.version === latestVersion ? 'latest' : openapiYaml.slug,\n  });\n  return (\n    <Layout selectedVersion={openapiYaml.slug} openApiStore={openApiStore}>\n      <React.Fragment>\n        <DocHead\n          title={openapiYaml.info.title + \" \" + openapiYaml.info.version}\n        />\n        <AppInfo store={openApiStore} />\n      </React.Fragment>\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query ($verid: String!) {\n    openapiYaml(id: { eq: $verid }) {\n      info {\n        contact {\n          email\n          url\n        }\n        description\n        termsOfService\n        title\n        version\n      }\n      openapi\n      x_tagGroups {\n        name\n        section\n        tags {\n          name\n          slug\n        }\n        slug\n      }\n      spec\n      slug\n      tags {\n        description\n        name\n      }\n    }\n    allOpenapiYaml {\n      nodes {\n        info {\n          version\n        }\n        slug\n      }\n    }\n  }\n`;\n"],"names":["SectionDiv","styled","props","theme","spacing","breakpoints","down","underlined","Section","id","children","ref","useRef","useContext","NavigationContext","dispatch","isVisible","callback","useState","isIntersecting","setIntersecting","isBrowser","observer","IntersectionObserver","entry","useEffect","observe","current","disconnect","useOnScreen","type","ActionKind","value","field","ApiHeader","H3","InfoSpan","palette","primary","main","InfoSpanBoxWrap","InfoSpanBox","ApiInfo","store","spec","info","externalDocs","license","identifier","href","url","name","website","contact","email","terms","termsOfService","version","Row","className","title","Markdown","key","source","summary","description","ExternalDocumentation","E","PageTemplate","data","openapiYaml","pageContext","allOpenapiYaml","latestVersion","getLatestSemver","nodes","map","openapi","openApiStore","OpenAPI","JSON","parse","versionSlug","slug","Layout","selectedVersion","DocHead"],"sourceRoot":""}